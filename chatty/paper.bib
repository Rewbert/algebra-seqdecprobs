@string{CUP = {Cambridge University Press}}
@string{JFPabbr = {J. Funct. Program.}}
@string{JFPlong = {Journal of Functional Programming}}

@ARTICLE{seqdecprobdeptypes,
       author = {{Botta}, Nicola and {Jansson}, Patrik and {Ionescu}, Cezar and
         {Christiansen}, David R. and {Brady}, Edwin},
        title = "{Sequential decision problems, dependent types and generic solutions}",
      journal = {arXiv e-prints},
     keywords = {Computer Science - Logic in Computer Science},
         year = "2016",
        month = "Oct",
          eid = {arXiv:1610.07145},
        pages = {arXiv:1610.07145},
archivePrefix = {arXiv},
       eprint = {1610.07145},
 primaryClass = {cs.LO},
       adsurl = {https://ui.adsabs.harvard.edu/\#abs/2016arXiv161007145B},
      adsnote = {Provided by the SAO/NASA Astrophysics Data System}
}

@phdthesis{norell_practical_2007,
  author =       {Ulf Norell},
  school =       {Chalmers Tekniska HÃ¶gskola},
  type =         {{PhD} Thesis},
  title =        {Towards a practical programming language based on
                  dependent type theory},
  year =         2007,
  abstract =     {Dependent type theories have a long history of being
                  used for theorem proving. One aspect of type theory
                  which makes it very powerful as a proof language is
                  that it mixes deduction with computation. This also
                  makes type theory a good candidate for
                  programming---the strength of the type system allows
                  properties of programs to be stated and established,
                  and the computational properties provide semantics
                  for the programs. This thesis is concerned with
                  bridging the gap between the theoretical
                  presentations of type theory and the requirements on
                  a practical programming language. Although there are
                  many challenging research problems left to solve
                  before we have an industrial scale programming
                  language based on type theory, this thesis takes us
                  a good step along the way.},
}